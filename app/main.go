// –§–∞–π–ª: main.go

package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"request-system/internal/repositories"
	"request-system/internal/routes"
	"request-system/internal/services"
	"request-system/pkg/config"
	"request-system/pkg/customvalidator" // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
	"request-system/pkg/database/postgresql"
	apperrors "request-system/pkg/errors"
	applogger "request-system/pkg/logger"
	"request-system/pkg/service"
	"request-system/pkg/utils"

	"github.com/go-playground/validator/v10"
	"github.com/go-redis/redis/v8"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"go.uber.org/zap"
)

// !!! –í–°–ï –§–£–ù–ö–¶–ò–ò-–í–ê–õ–ò–î–ê–¢–û–†–´ (isGoodEmailFormat, isTajikPhoneNumber –∏ —Ç.–¥.) –û–¢–°–Æ–î–ê –£–î–ê–õ–ï–ù–´ !!!
// –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –∂–∏–≤—É—Ç –≤ pkg/customvalidator/validators.go

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found or could not be loaded.")
	}

	// 1. –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Echo –∏ –ª–æ–≥–≥–µ—Ä–∞
	e := echo.New()
	logger := applogger.NewLogger()

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
	cfg := config.New()

	// 3. –ü–û–°–õ–ï —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç logger –∏ echo
	e.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
		DisableStackAll: true,
		StackSize:       1 << 10,
		LogErrorFunc: func(c echo.Context, err error, stack []byte) error {
			logger.Error("!!! –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–ê–ù–ò–ö–ê (PANIC) !!!",
				zap.String("method", c.Request().Method),
				zap.String("uri", c.Request().RequestURI),
				zap.Error(err),
				zap.String("stack", string(stack)),
			)
			if !c.Response().Committed {
				httpErr := apperrors.NewHttpError(http.StatusInternalServerError, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", err, nil)
				utils.ErrorResponse(c, httpErr, logger)
			}
			return err
		},
	}))

	e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			c.Response().Header().Set("ngrok-skip-browser-warning", "true")
			return next(c)
		}
	})

	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOriginFunc: func(origin string) (bool, error) {
			allowedOrigins := []string{
				"https://d41fdadc8416.ngrok-free.app",
				"http://localhost:5173",
			}
			for _, o := range allowedOrigins {
				if origin == o {
					return true, nil
				}
			}
			return false, nil
		},
		AllowMethods:     []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodDelete, http.MethodOptions},
		AllowHeaders:     []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization, "ngrok-skip-browser-warning"},
		AllowCredentials: true,
		ExposeHeaders:    []string{"Content-Disposition"},
	}))

	// 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	absPath, err := filepath.Abs("./uploads")
	if err != nil {
		logger.Fatal("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ uploads", zap.Error(err))
	}
	e.Static("/uploads", absPath)

	// <<<--- 5. –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–°–¢–û –î–õ–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –í–ê–õ–ò–î–ê–¢–û–†–ê ---
	// –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç logger –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ –∏ `e` –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è.
	v := validator.New()
	// –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞
	if err := customvalidator.RegisterCustomValidations(v); err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏", zap.Error(err))
	}
	e.Validator = utils.NewValidator(v)
	// <<<--- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –í–ê–õ–ò–î–ê–¢–û–†–ê ---

	// 6. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
	dbConn := postgresql.ConnectDB()
	defer dbConn.Close()

	redisAddr := os.Getenv("REDIS_ADDRESS")
	if redisAddr == "" {
		redisAddr = "localhost:6379"
	}
	redisClient := redis.NewClient(&redis.Options{
		Addr:     redisAddr,
		Password: os.Getenv("REDIS_PASSWORD"),
		DB:       0,
	})
	if _, err := redisClient.Ping(context.Background()).Result(); err != nil {
		logger.Fatal("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis", zap.Error(err), zap.String("address", redisAddr))
	}

	// 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
	jwtSecretKey := os.Getenv("JWT_SECRET_KEY")
	accessTokenTTL := time.Hour * 24
	refreshTokenTTL := time.Hour * 24 * 7 // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –≤–∞—à–µ–º –∫–æ–¥–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ .env –≤ config.New()
	jwtSvc := service.NewJWTService(jwtSecretKey, accessTokenTTL, refreshTokenTTL, logger)

	permissionRepo := repositories.NewPermissionRepository(dbConn, logger)
	cacheRepo := repositories.NewRedisCacheRepository(redisClient)

	rolePermissionsCacheTTL := time.Minute * 10
	authPermissionService := services.NewAuthPermissionService(permissionRepo, cacheRepo, logger, rolePermissionsCacheTTL)

	// 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
	routes.InitRouter(e, dbConn, redisClient, jwtSvc, logger, authPermissionService, cfg)

	// 9. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	logger.Info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	if err := e.Start(":8080"); err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
	}
}
