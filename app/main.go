
package main

import (
	"log"
	"os"
	"request-system/internal/routes"
	"request-system/pkg/database/postgresql"
	applogger "request-system/pkg/logger"
	"request-system/pkg/service"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"go.uber.org/zap"
)

type CustomValidator struct {
	validator *validator.Validate
}

func (cv *CustomValidator) Validate(i interface{}) error {
	if err := cv.validator.Struct(i); err != nil {

		return err
	}
	return nil
}

func main() {

	err := godotenv.Load()
	if err != nil {
		log.Println("Warning: .env file not found, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
	}
	e := echo.New()
	e.Validator = &CustomValidator{validator: validator.New()}

	logger := applogger.NewLogger()

	dbConn := postgresql.ConnectDB()
	if dbConn == nil {
		logger.Fatal("main: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}
	logger.Info("main: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

	jwtSecretKey := os.Getenv("JWT_SECRET_KEY")
	if jwtSecretKey == "" {
		logger.Warn("main: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è JWT_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –î–ï–§–û–õ–¢–ù–´–ô (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–´–ô) –ö–õ–Æ–ß.")
		jwtSecretKey = "s8D3f9LqPwX2vM0zNzG7RkH1TcJb5YxVUaQWmEoZlIfSgCnBtKhDrLjPeUyOxFa"
	}

	if len(jwtSecretKey) < 64 && os.Getenv("APP_ENV") != "development" {

		logger.Info("main: –î–ª–∏–Ω–∞ JWT_SECRET_KEY", zap.Int("length", len(jwtSecretKey)))

		logger.Warn("main: JWT_SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è HS512), –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–æ–π!")
	}

	accessTokenTTL := time.Hour * 1
	refreshTokenTTL := time.Hour * 24 * 7

	jwtSvc := service.NewJWTService(jwtSecretKey, accessTokenTTL, refreshTokenTTL)
	logger.Info("main: JWTService —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

	routes.INIT_ROUTER(e, dbConn, jwtSvc, logger)

	serverStartTime := time.Now()
	log.Printf("DEBUG: Server current time at start is %s in location %s", serverStartTime.Format(time.RFC3339), serverStartTime.Location())
	logger.Info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")

	if err := e.Start(":8080"); err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
	}
}
